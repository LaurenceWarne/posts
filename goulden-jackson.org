#+TITLE: Counting Substrings and the Goulden-Jackson Cluster Method
#+LAYOUT: post
#+DESCRIPTION: Counting Substrings and the Goulden-Jackson Cluster Method
#+CATEGORIES: maths combinatorics
#+AUTHOR: Laurence Warne
#+DATE: 2024-02-04 Sun 19:00

* Intro

Suppose we want to find the number of strings of length \( n \) (sourced say from some given alphabet \( V \)), which don't contain any of a given set of strings \( B \) as a substring.  Is there a fast way to do this?

The most basic case is excluding a string of a single character, in which case there are \( n^{\left|V\right| - 1} \) total strings.  But past single character strings, reasoning becomes a bit more difficult.  It's always true (and we will show) that the total number of strings follows a linear recurrence and so calculating the first few results using DP and using Berlekamp Massey will give a fast way, though we will show a way to compute a generating function directly.

* A Derivation

Let's first define the weight \( W_R \) of some word \( w = w_1 \dots w_n  \in V^* \) of length \( n \).  We will define it using the set of variables \( x\left[w'\right] \) for all \( w' \in V^* \) of length \( R \) or less as follows:

\[
W_R(w) = \prod_{k = 1}^n \prod_{m = k}^{\min(k + R, n)} x\left[w_k \dots w_m\right]
\]

Note some factors may appear more than once, for example:

\[
W_2(HELL) = x\left[H\right]x\left[E\right]x\left[L\right]^2x\left[HE\right]x\left[EL\right]x\left[LL\right]
\]

Now, we define the generating function over \( x[w] \) where \( w \) has length \( \le R \) as:

\[
\Phi_R = \sum_{w \in V^*} W_R(w)
\]

Our strategy will be to perform substitutions on \( \Phi_R \) in order to recover the generating functions we want.  For example the mapping:

\begin{equation}
x[w] \mapsto \left\{
    \begin{array}{ll}
        0, & \text{if } w \text{ is a string we want to exclude}\\
        x, & \text{if } w \text{ is a single character string}\\
        1, & \text{otherwise}
    \end{array}
\end{equation}

Will give us the generating function \( \sum a_n x^n \) where \( a_n \) is the number of words of length \( n \) not containing a given set of words as a substring.  We'll denote this generating function by \( G(x) \).

** Computing \( \Phi_R \)

Let's define:

\[
Suff(w) = \{ w' \in V^* : \text{w' ends in w} \}
\]

Now, all words in \( V^* \) must either be of length less than \( R \) or end in some string of length \( R \).  Define:

\[
\Phi_{R, w} = \sum_{w' \in Suff(w)} W_R(w')
\]

Then our generating function is the sum of \( \Phi_{R, w} \) for all words of length \( R \) plus the sum of \( W_R(w) \) for all words of length less than \( R \).  Next, we see that our set of \( \Phi_{R, w} \) form a set of simultaneous equations:

\[
 \Phi_{R, w_1 \dots w_R} = W_R(w) + \left(\prod_{i \ge 1} x\left[w_i \dots w_r \right] \right) \sum_{c \in V} \Phi_{R, cw_1 \dots w_{R - 1}}
\]

Which says in essence, if a word \( w' \) ends in \( w \), then it must either be \( w \) itself, else we can drop the last character of \( w' \) and we are left another word with a suffix of length \( R \).  And so calculating \( \Phi_R \) reduces to solving these equations.

Note, making the substitution (1) prior to solving the system simplifies computing \( G(x) \).  We'll denote (1) applied to \( \Phi_{R, w} \) as \( \Phi_{R, w}(x) \).

** Example

Consider the binary string of length \( n \) not containing the substring \( 111 \).  We see (making our substitution ahead of time):

\begin{align*}
\Phi_{3, 000}(x) &= x^3 + x \left(\Phi_{3, 100}(x) + \Phi_{3, 000}(x) \right)\\
\Phi_{3, 001}(x) &= x^3 + x \left(\Phi_{3, 100}(x) + \Phi_{3, 000}(x) \right)\\
\Phi_{3, 010}(x) &= x^3 + x \left(\Phi_{3, 101}(x) + \Phi_{3, 001}(x) \right)\\
\Phi_{3, 011}(x) &= x^3 + x \left(\Phi_{3, 101}(x) + \Phi_{3, 001}(x) \right)\\
\Phi_{3, 100}(x) &= x^3 + x \left(\Phi_{3, 110}(x) + \Phi_{3, 010}(x) \right)\\
\Phi_{3, 101}(x) &= x^3 + x \left(\Phi_{3, 110}(x) + \Phi_{3, 010}(x) \right)\\
\Phi_{3, 110}(x) &= x^3 + x \left(\Phi_{3, 111}(x) + \Phi_{3, 011}(x) \right)\\
\Phi_{3, 111}(x) &= x \left(\Phi_{3, 111}(x) + \Phi_{3, 011}(x) \right)\\
\end{align*}

Solving, we find that:

\begin{align*}
\Phi_{3, 000}(x) &= \Phi_{3, 001}(x) = \Phi_{3, 010}(x) = \Phi_{3, 011}(x) = -\frac{x^5 + x^4 + x^3}{x^3 + x^2 + x - 1}\\
\Phi_{3, 100}(x) &= \Phi_{3, 101}(x) = \Phi_{3, 110}(x) = -\frac{x^4 + x^3}{x^3 + x^2 + x - 1}\\
\Phi_{3, 111}(x) &= 0
\end{align*}

Ands thus:

\begin{align*}
G(x) &= 1 + 2x + 4x^2 + \frac{4x^5 + 6x^4 + 7x^3}{1 - x^3 - x^2 - x}\\
     &= \frac{x^2 + x + 1}{1 - x^3 - x^2 - x}\\
\end{align*}

AKA the (shifted) [[https://oeis.org/A000073][Tribonacci numbers]].

* The Goulden-Jackson Cluster Method

Using the above method duplicates a lot of effort.  For example, In our previous example we can see that \( \Phi_{3, 001}(x) = \Phi_{3, 000}(x) \), since the number of binary strings of a given length ending in both \( 001 \) and \( 000 \) must be the same.  We'll introduce the Goulden-Jackson Cluster method as a means of reducing our work.

In this section we'll add a couple of restrictions on our set of bad words \( B \).  Firstly, no bad word should appear as a substring of any other bad word - the bigger bad word can be removed from \( B \).  Secondly, all \( b \in B \) should be of length at least two.  If this is not true, we can equivalently remove \( v \in B \) from our alphabet \( V \).

** Clusters
Given \( w \) and a set of words \( B \), we define a *marked word* as a pair \( (w, \{ (b_1, i_1), (b_2, i_2) \dots (b_l, i_l) : w_{i_k} \dots w_{i_k + length(b_k) - 1} = b_k \in B \}) \).  For example, for \( B = \{HE, EL, LO \} \), the following is a marked word:

\[
(HELLO, \{ (HE, 1), (EL, 2), (LO, 4) \})
\]

And we define a *cluster* as a marked word which cannot be decomposed into the concatenation (defined how you would expect) of two nonempty marked words:

\[
(HEL, \{ (HE, 1), (EL, 2) \})
\]

Note, every subword of \( B \) in \( w \) needn't be included in the marked word, for example:

\[
(HELLO, \{ (HE, 1) \})
\]

Is a completely valid marked word.  Also noteworthy is the fact that for every cluster \( c = c_1 \dots c_n \), every \( c_i \) is part of some bad word.

We'll define \( C_B(w) \) as the set of all clusters on \( w \) (exercise: find \( w, B \) such that this set has size greater than one), \( M_B \) as the set of all marked words, and \( C_B \) as the set of all clusters given \( B \).  Note that \( C_B(w) = \emptyset \Leftrightarrow w \text{ contains no factors in } B \).

** A Formula

First of all, we'll define a the generating function \( f_B(s) \):

\[
f_B(s) = \sum_{w \in L(B)} s^{length(w)}
\]

Where \( L(B) \) is the set of all words in \( V^* \), not containing any word in \( B \) as a substring.  Further define the auxiliary generating functions:

\begin{align*}
F_B(s, t) &= \sum_{(w, S) = m \in M_B} s^{length(w)} t^{\left|S\right|}\\
C_B(s, t) &= \sum_{(w, S) = c \in C_B} s^{length(w)} t^{\left|S\right|}
\end{align*}

And define \( Q(m = (w, S)) = s^{length(w)}t^{\left|S\right|} \) for brevity (it should be clear that \( Q(m_1m_2) = Q(m_1)Q(m_2) \)).  Next, we see that every marked word \( m = (w, S) \) either ends in a character not present in any bad word in \( S \), or otherwise the last character is part of the last bad word in \( S \) (which itself must be part of a cluster):

\[
 M_B = \{ e \} \cup \{ mc : m \in M_B, \ c \in C_B \} \cup \{ mv : m \in M_B, \ v \in V \}\\
\]
 \begin{align*}
\Rightarrow F_B(s, t) &= 1 + \sum_{m \in M_B} \sum_{c \in C_B} Q(mc) + \sum_{m \in M_B} \sum_{v \in V} Q(mv)\\
                      &= 1 + \sum_{m \in M_B} \sum_{c \in C_B} Q(m)Q(c) + \sum_{m \in M_B} \sum_{v \in V} Q(m)Q(v)\\
                      &= 1 + F_B(s, t)C_B(s, t) + \left|V\right|s \left(F_B(s, t)\right)\\
                      &= \frac{1}{1 - \left|V\right|s - C_B(s, t)}
 \end{align*}

 Where \( e \) is the (unique) empty marked word; note also the union is disjoint.  We also wave hands a bit for \( v \in V \), these always correspond to exactly one marked word given all elements of \( B \) have length greater than one.

 Thus, calculating \( F_B(s, b) \) reduces to calculating \( C_B(s, t) \).  We can group clusters according to their last entry \( b \).  For some cluster \( c = (w, S) \), the cluster must then either consist solely of \( b \) (which implies \( w = b \)), else we can remove \( b \) along with some suffix of \( w \) to produce a smaller cluster.

 For each \( b \in B \) let \( C_B[b] \) denote the set of clusters ending in \( b \), with \( C_B[b](s, t) \) defined similarly.  Then \( C_B[b](s, t) \) form a SLE, for example for \( B = \{HELE, ELEM\} \), we have:

\begin{align*}
C_B[ELEM](s, t) &= C_B[HELE](s, t)st + C_B[HELE](s, t)s^3t + s^4\\
C_B[HELE](s, t) &= s^4t
\end{align*}

Which results in:

\begin{align*}
C_B(s, t) &= s^4t + s^4t(st + s^3t + 1)\\
F_B(s, t) &= \frac{1}{(1 - 26s) - (s^4t + s^4t(st + s^3t + 1))}
\end{align*}

Now, recovering \( f_B(s) \) from \( F_B(s, t) \) is equivalent to substituting \( t = -1 \) (exercise!), resulting in:

\[
f_B(s) = \frac{1}{1 - s^7 - s^5 - 2s^4 - 26s}
\]

Sage implementation:

#+begin_src python
import string


def goulden_jackson(bad_words, alphabet=string.ascii_uppercase):
    s, gfvs = var("s"), {w: var(f"G_{w}") for w in bad_words}
    eqns = []
    for end_word in bad_words:
        eq = -s^(len(end_word))
        for i in range(1, len(end_word) + 1):
            sub = end_word[:i]
            for source_word in bad_words:
                if source_word.endswith(sub):
                    eq += -s^(len(end_word) - len(sub))*gfvs[source_word]
        eqns.append(eq == 0)

    CB = sum(eq.right() for eq in solve(eqns, *gfvs.values())[0])
    G = 1 / (1 - len(alphabet)*s - CB)
    return G.numerator() / G.denominator()
#+end_src

Our overlap checking is not optimised, 

* Examples


* Links

- https://uwaterloo.ca/math/sites/default/files/uploads/documents/gjjlms1979.pdf (original paper)
- https://arxiv.org/pdf/1508.02793.pdf
